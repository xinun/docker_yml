
services:
  # --- 1. 데이터 계층 (Data Tier) ---
  mongodb:
    image: mongo:4
    container_name: mongodb
    networks:
      - backend-net # Backend 컨테이너만 접근
    volumes:
      - mongodb-db:/data/db # 영구 데이터 저장을 위해 명명된 볼륨을 사용 권장
    restart: always
    ports:
      - "27017:27017"

  # --- 2. 백엔드 계층 (Backend / API Tier) ---
  backend1:
    image: harbor.local.net/myproject/backend:2.0_slim
    container_name: backend1
    environment:
      - PORT=8000
      - GUESTBOOK_DB_ADDR=mongodb:27017 # backend-net을 통한 DB 접근
    networks:
      - backend-net # DB 통신용
    restart: always

  backend2:
    image: harbor.local.net/myproject/backend:2.0_slim
    container_name: backend2
    environment:
      - PORT=8000
      - GUESTBOOK_DB_ADDR=mongodb:27017
    networks:
      - backend-net
    restart: always

  backend3:
    image: harbor.local.net/myproject/backend:2.0_slim
    container_name: backend3
    environment:
      - PORT=8000
      - GUESTBOOK_DB_ADDR=mongodb:27017
    networks:
      - backend-net
 
    restart: always

  # --- 3. HAProxy (Internal Load Balancer) ---
  haproxy-core:
    image: haproxytech/haproxy-alpine:2.4
    container_name: haproxy-core
    # Frontend에서 API 요청을 받기 위해 proxy-net에 연결
    networks:
      - backend-net
    ports:
      - "80:80"     # Frontend로부터의 API 요청 수신
      - "8404:8404" # HAProxy 관리 포트 노출
    volumes:
      - ./confs/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg:ro

  # --- 4. 프론트엔드 계층 (Frontend Tier) ---
  frontend1:
    image: harbor.local.net/myproject/frontend:2.0_slim
    container_name: frontend1
    environment:
      - PORT=8000
      - GUESTBOOK_API_ADDR=haproxy-core:80 # HAProxy를 API 게이트웨이로 사용
    ports:
      - "3000:8000"
    networks:
      - frontend-net # Nginx/Proxy 통신용
      - backend-net  # HAProxy 통신용
    restart: always
  
  frontend2:
    image: harbor.local.net/myproject/frontend:2.0_slim
    container_name: frontend2
    environment:
      - PORT=8000
      - GUESTBOOK_API_ADDR=haproxy-core:80
    ports:
      - "3001:8000"
    networks:
      - frontend-net
      - backend-net
    restart: always
    
  frontend3:
    image: harbor.local.net/myproject/frontend:2.0_slim
    container_name: frontend3
    environment:
      - PORT=8000
      - GUESTBOOK_API_ADDR=haproxy-core:80
    ports:
      - "3002:8000"
    networks:
      - frontend-net
      - backend-net
    restart: always

  # --- 5. Nginx (Edge Proxy / Web Load Balancer) ---
  web-proxy:
    image: nginx:1.29.1
    container_name: web-proxy
    hostname: web-proxy
    ports:
      - "8888:80" # 외부 접속 포트
    volumes:
      - ./nginx.conf/nginx.conf:/etc/nginx/nginx.conf:ro # 호스트 nginx.conf 마운트
    networks:
      - frontend-net # Frontend 3개로 로드밸런싱
    restart: always

# --- 볼륨 및 네트워크 정의 ---
volumes:
  mongodb-db: {} # 만약 영구 저장이 필요하다면 사용

networks:
  backend-net: {} # MongoDB <-> Backend (데이터 통신)
  proxy-net: {}   # Backend <-> HAProxy (App Layer 통신)
  frontend-net: {} # Frontend <-> Nginx (웹 통신)
